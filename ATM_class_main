// This is the main class of this project
import java.util.Scanner;
public class ATM {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		Bank theBank = new Bank(" Bank Of Nepal");
		
		//add a user to the bank
		
		User aUser = theBank.addUser("Samrat", "Rai", "1234");
		
		Account newAccount = new Account("Checking", aUser, theBank);
		
		aUser.addAccount(newAccount);
		theBank.addAccount(newAccount);
		
		User curUser;
		while (true)
		{
			curUser = ATM.mainMenuPrompt(theBank, sc);
			
			ATM.printUserMenu(curUser, sc);
		}

	}
	
	public static User mainMenuPrompt(Bank theBank, Scanner sc) {
		
		String userID;
		String pin;
		User authUser = null;
		
		do {
			System.out.printf("\n\nWelcome to %s\n\n", theBank.getName());
			System.out.println("Enter user ID: ");
			userID = sc.nextLine();
			System.out.println("Enter pin: ");
			pin = sc.nextLine();
			
			// try to get the user object corresponding to the ID and pin
			authUser = theBank.userLogin(userID, pin);
			if(authUser == null) {
				System.out.println("Incorrect user Id/pin combination." 
			+ " Please try again");
				
			}
		}while(authUser == null);// continue till
		
		return authUser;
	}
	
	public static void printUserMenu( User theUser, Scanner sc)
	{
		//print summary of the users's accounts
		
		theUser.printAccountsSummary();
		
		// init
		int choice;
		
		//user menu
		
		do {
			
			
			System.out.printf("Welcome %s what would you like to do ?\n", theUser.getFirstName());
			System.out.println(" 1. Show the account transaction history");
			System.out.println(" 2. Withdraw");
			System.out.println(" 3. Deposit");
			System.out.println(" 4. Transfer");
			System.out.println(" 5. Quit");
			System.out.println();
			System.out.print("Enter Choice: ");
			choice = sc.nextInt();
			
			if (choice < 1 || choice > 5) {
				System.out.print("Invalid choice, Please choose 1-5");
			}
			
		}while(choice < 1 || choice > 5);
		
		switch(choice) {
		
		case 1:
			
			ATM.showTransHistory(theUser, sc);
			break;
		case 2:
			
			ATM.withdrawlFunds(theUser, sc);
			break;
		case 3:
			
			ATM.depositFunds(theUser, sc);
			break;
		case 4:
			
			ATM.transferFunds(theUser, sc);
			break;
			
		case 5:
			sc.nextLine();
			break;
		}
		
		//redisplay unless the user wants to quit
		
		if(choice != 5) {
			ATM.printUserMenu(theUser, sc);
		}
	}
	
	public static void showTransHistory(User theUser, Scanner sc) {
		int theAcct;
		
		do {
			System.out.printf("Enter the number (1-%d) of the Account\n" + 
		"whose transaction you want to see: ", theUser.numAccounts());
			theAcct = sc.nextInt()-1;
			if(theAcct <= 0 || theAcct >= theUser.numAccounts());
			{
				System.out.println("Invalid Account, Please try again.");
			}
		}while(theAcct <= 0 || theAcct >= theUser.numAccounts());
		//print the transaction history
		theUser.printAccntTransHistory(theAcct);
	}
	
	public static void withdrawlFunds(User theUser, Scanner sc) {
		//inits
		int fromAcct;
		
		double amount;
		double acctBal;
		String memo;
		
		do {
			System.out.printf("Enter the number (1-%d) of the account\n" + 
		"to transfer from: ", theUser.numAccounts());
			fromAcct = sc.nextInt()-1;
			if (fromAcct < 0 || fromAcct >= theUser.numAccounts()) {
				System.out.println("Invalid account. Please try again.");
			}
		}
		while(fromAcct < 0 || fromAcct >= theUser.numAccounts());
		acctBal = theUser.getAcctBalance(fromAcct);
		
		//get the amount to transfer
		
		do {
			System.out.printf("Enter the amount to transfer (max $%.02f): $",
					acctBal);
			amount = sc.nextDouble();
			if(amount < 0)
			{
				System.out.println("Amount must be greater than 0");
			}else if(amount > acctBal) {
				System.out.printf("Amount must not be greater than\n" + "balance of $%.02f.\n", acctBal);
			}
		}while(amount < 0 || amount > acctBal);
		
		//gobble up the rest of previous input 
		sc.nextLine();
		
		//get a memo
		System.out.println("Enter a memo: ");
		memo = sc.nextLine();
		
		//do the withdraw
		theUser.addAcctTransaction(fromAcct, -1*amount, memo);
		
	}
	public static void depositFunds(User theUser, Scanner sc) {
		//initializing
		int toAcct;
		
		double amount;
		
		String memo;
		
		do {
			System.out.printf("Enter the number (1-%d) of the account\n" + "to deposit to: ", 
					theUser.numAccounts());
			toAcct = sc.nextInt()-1;
			if (toAcct < 0 || toAcct >= theUser.numAccounts()) {
				System.out.println("Invalid account. Please try again.");
			}
		}
		while(toAcct < 0 || toAcct >= theUser.numAccounts());
		
		//get the amount to transfer
		
		do {
			System.out.printf("Enter the amount to deposit: $");
			amount = sc.nextDouble();
			if(amount < 0)
			{
				System.out.println("Amount must be greater than 0");
			}
		}while(amount < 0 );
		
		//gobble up the rest previous input line
		sc.nextLine();
		
		//get a memo
		System.out.println("Enter a memo: ");
		memo = sc.nextLine();
		
		//do the deposit
		theUser.addAcctTransaction(toAcct, amount, memo);
	}

	public static void transferFunds(User theUser, Scanner sc) {
		
		//initializing
		int fromAcct;
		int toAcct = 0 ;
		double amount;
		double acctBal;
		// get the account to transfer from
		
		do {
			
			System.out.printf("Enter the number (1-%d) of the account\n" 
			+ "to transfer from: ", theUser.numAccounts());
			fromAcct = sc.nextInt()-1;
			if (fromAcct < 0 || fromAcct >= theUser.numAccounts()) {
				System.out.println("Invalid account. Please try again.");
			}
		}
		while(fromAcct < 0 || fromAcct >= theUser.numAccounts());
		acctBal = theUser.getAcctBalance(fromAcct);
		
		//get the account to transfer to 
		do {
			System.out.printf("Enter the number (1-%d) of the account\n" + 
		"to transfer from: ", theUser.numAccounts());
			fromAcct = sc.nextInt()-1;
			if (toAcct < 0 || toAcct >= theUser.numAccounts()) {
				System.out.println("Invalid account. Please try again.");
			}
		}while(toAcct < 0 || toAcct >= theUser.numAccounts());
		
		
		//get the amount to transfer
		
		do {
			System.out.printf("Enter the amount to transfer (max $%.02f): $",
					acctBal);
			amount = sc.nextDouble();
			if(amount < 0)
			{
				System.out.println("Amount must be greater than zero");
			}else if(amount > acctBal) {
				System.out.printf("Amount must not be greater than\n" + "balance of $%.02f.\n", acctBal);
			}
		}while(amount < 0 || amount > acctBal);
		
		//finally do the transfer
		
		theUser.addAcctTransaction(fromAcct, -1*amount, String.format(
				"Transfer to account %s", theUser.getAcctUUID(toAcct))); 
		theUser.addAcctTransaction(toAcct, amount, String.format(
				"Transfer to account %s", theUser.getAcctUUID(fromAcct)));
		
	}
}
